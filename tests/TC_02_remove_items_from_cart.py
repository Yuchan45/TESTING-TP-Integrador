# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.common import NoAlertPresentException, NoSuchElementException
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


class TestTC02removeitems():
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.driver.implicitly_wait(5)  # Implicitly await for 5s
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    def test_remove_items_from_cart(self):
        # Arrange
        self.driver.get("https://www.demoblaze.com/index.html")
        self.driver.set_window_size(1936, 1056)

        # Add first product
        self.driver.find_element(By.LINK_TEXT, "Samsung galaxy s6").click()
        self.driver.find_element(By.LINK_TEXT, "Add to cart").click()

        self.driver.find_element(By.CSS_SELECTOR, ".active > .nav-link").click()

        # Add second product
        self.driver.find_element(By.LINK_TEXT, "Nokia lumia 1520").click()
        self.driver.find_element(By.LINK_TEXT, "Add to cart").click()

        self.driver.find_element(By.CSS_SELECTOR, ".active > .nav-link").click()

        # Add third product
        self.driver.find_element(By.LINK_TEXT, "Nexus 6").click()
        self.driver.find_element(By.LINK_TEXT, "Add to cart").click()
        try:
            alert = self.driver.switch_to.alert
            alert.accept()  # If the alert box shows up, accept it
        except NoAlertPresentException:
            print("\nNoAlertPresentException: No alert was found")

        # Go to cart view
        # Arrange, check that the state of the cart is set as expected
        self.driver.find_element(By.ID, "cartur").click()
        time.sleep(3)

        samsung_tr = self.driver.find_element(By.XPATH, "//td[text()='Samsung galaxy s6']")
        nokia_tr = self.driver.find_element(By.XPATH, "//td[text()='Nokia lumia 1520']")
        nexus_tr = self.driver.find_element(By.XPATH, "//td[text()='Nexus 6']")
        price = self.driver.find_element(By.ID, "totalp").text
        time.sleep(1)

        assert price == '1830'

        # Delete item (Nokia lumia 1520)
        nokia_remove_btn = self.driver.find_element(By.XPATH, "//td[text()='Nokia lumia 1520']/following-sibling::td/a[text()='Delete']")
        nokia_remove_btn.click()
        time.sleep(3)

        # Assert that the Nokia element has been removed
        try:
            self.driver.find_element(By.XPATH, "//td[text()='Nokia lumia 1520']")
            nokia_present = True
        except NoSuchElementException:
            nokia_present = False

        assert not nokia_present, "Nokia lumia 1520 has not been removed from the cart"
        price = self.driver.find_element(By.ID, "totalp").text
        assert price == '1010'

        # Delete item (Nexus)
        nexus_remove_btn = self.driver.find_element(By.XPATH, "//td[text()='Nexus 6']/following-sibling::td/a[text()='Delete']")
        nexus_remove_btn.click()
        time.sleep(3)

        # Assert that the Nexus element has been removed
        try:
            self.driver.find_element(By.XPATH, "//td[text()='Nexus 6']")
            nexus_present = True
        except NoSuchElementException:
            nexus_present = False

        assert not nexus_present, "Nexus 6 has not been removed from the cart"
        price = self.driver.find_element(By.ID, "totalp").text
        assert price == '360'

        # Assert that the Samsung element is still there
        try:
            self.driver.find_element(By.XPATH, "//td[text()='Samsung galaxy s6']")
            samsung_present = True
        except NoSuchElementException:
            samsung_present = False

        assert samsung_present, "Samsung galaxy s6 is still in the cart"
